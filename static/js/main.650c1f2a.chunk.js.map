{"version":3,"sources":["utils/ValidationSchema.js","components/raceCar/RaceCarForm.jsx","components/raceCar/RaceCarContainer.jsx","components/raceCar/RaceCarsTable.jsx","config/FirebaseConfig.js","components/raceCar/RaceCars.jsx","components/navigations/Header.jsx","components/navigations/SideBar.jsx","App.js","serviceWorker.js","index.js"],"names":["RaceCarFormValidation","Yup","shape","firstName","required","lastName","RaceCarForm","props","formValues","submitForm","deleteCar","initialValues","enableReinitialize","validationSchema","onSubmit","values","preSubmit","render","handleSubmit","handleChange","errors","touched","resetForm","isSubmitting","setSubmitting","className","id","bibNumber","htmlFor","name","type","placeholder","onChange","value","onClick","docId","RaceCarContainer","toggleForm","raceCar","addCarToList","RaceCarsTable","getTableData","raceCars","isLoading","role","colSpan","length","map","index","key","scope","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","RaceCars","RACE_CAR_INITIAL_STATE","useState","setRaceCars","counter","setCounter","setRaceCar","setToggleForm","firestore","database","isLoadingList","setLoadingList","useEffect","getAllRaceCarsFromDB","collection","get","then","querySnapShot","forEach","doc","data","oldList","console","log","getCounterFromDB","a","settings","timestampsInSnapshots","add","replace","generateCarBibNumber","set","delete","oldCounter","Fragment","Header","SideBar","App","routeComponents","path","component","route","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6NACaA,EAAwBC,MAAaC,MAAM,CACpDC,UAAWF,MACNG,SAAS,2BACdC,SAAUJ,MACLG,SAAS,4BCuFHE,EAxFG,SAAAC,GAAU,IAEhBC,EAAqCD,EAArCC,WAAYC,EAAyBF,EAAzBE,WAAYC,EAAaH,EAAbG,UAMhC,OACI,kBAAC,IAAD,CACAC,cAAeH,EACfI,oBAAoB,EACpBC,iBAAkBb,EAClBc,SAAU,SAAAC,GAAM,OATF,SAAAA,GACdN,EAAWM,GAQUC,CAAUD,IAC/BE,OAAQ,gBAAEF,EAAF,EAAEA,OAAQG,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,OAAQC,EAA9C,EAA8CA,QAAuBC,GAArE,EAAuDC,aAAvD,EAAqED,WAArE,EAAgFE,cAAhF,OACJ,kBAAC,IAAD,KACI,yBAAKC,UAAU,aACVjB,GAAcA,EAAWkB,IACtB,yBAAKD,UAAU,OACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,OACX,uCAEJ,yBAAKA,UAAU,OACX,2BAAIjB,EAAWkB,MAGvB,yBAAKD,UAAU,WACX,yBAAKA,UAAU,OACX,4CAEJ,yBAAKA,UAAU,OACX,2BAAIjB,EAAWmB,cAK/B,yBAAKF,UAAU,cACX,2BAAOG,QAAQ,aAAf,eACA,2BACAF,GAAG,YACHG,KAAK,YACLJ,UAAU,eACVK,KAAK,OACLC,YAAY,mBACZC,SAAUb,EACVc,MAAOlB,EAAOZ,YAEbkB,EAAQlB,WAAaiB,EAAOjB,UACrB,0BAAMsB,UAAU,eAAhB,KAAiCL,EAAOjB,WAC5C,MAER,yBAAKsB,UAAU,cACX,2BAAOG,QAAQ,YAAf,cACA,2BACAF,GAAG,WACHG,KAAK,WACLJ,UAAU,eACVK,KAAK,OACLC,YAAY,kBACZC,SAAUb,EACVc,MAAOlB,EAAOV,WAEbgB,EAAQhB,UAAYe,EAAOf,SACpB,0BAAMoB,UAAU,eAAhB,KAAiCL,EAAOf,UAC5C,MAER,yBAAKoB,UAAU,OACX,yBAAKA,UAAU,OACX,4BAAQA,UAAU,iCAAiCK,KAAK,QAAQI,QAASZ,GAAzE,UAEJ,yBAAKG,UAAU,OACX,4BAAQA,UAAU,+BAA+BK,KAAK,SAASI,QAAShB,GAAxE,WAEHV,GAAcA,EAAWkB,IAC1B,yBAAKD,UAAU,OACX,4BAAQA,UAAU,+BAA+BK,KAAK,SAASI,QAAS,kBAAIxB,EAAUF,EAAW2B,SAAjG,kBCzCbC,EApCQ,SAAA7B,GAAU,IAEtB8B,EAAgD9B,EAAhD8B,WAAYC,EAAoC/B,EAApC+B,QAASC,EAA2BhC,EAA3BgC,aAAc7B,EAAaH,EAAbG,UAM1C,OACI,yBAAKe,UAAU,6BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,uBAAGA,UAAU,0BAA0BS,QAAS,kBAAIG,GAAW,OAEnE,yBAAKZ,UAAU,UACX,wBAAIA,UAAU,eAAd,sBAGR,6BACA,kBAAC,EAAD,CACIf,UAAWA,EACXF,WAAY8B,EACZ7B,WAtBL,SAAAM,GACfwB,EAAaxB,QAyBL,yBAAKU,UAAU,aCoChBe,EAnEK,SAAAjC,GAAU,IAEnB8B,EAAiD9B,EAAjD8B,WAAYI,EAAqClC,EAArCkC,aAAcC,EAAuBnC,EAAvBmC,SAAUC,EAAapC,EAAboC,UAE3C,OACI,yBAAKlB,UAAU,mCACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,oCACX,yCAEJ,yBAAKA,UAAU,kCACX,4BAAQK,KAAK,SAASL,UAAU,kBAAkBS,QAASG,GAAY,uBAAGZ,UAAU,qBAApF,kBAGR,2BAAOA,UAAU,mCACb,+BACI,4BACI,kCACA,0CACA,0CACA,yCACA,wCAGR,+BAESkB,EA4BD,wBAAIC,KAAK,OACL,wBAAInB,UAAU,6BAA6BoB,QAAQ,KAC/C,yBAAKpB,UAAU,iBAAiBmB,KAAK,WACrC,wCA9BJF,EAASI,OAAS,EACdJ,EAASK,KAAI,SAACT,EAASU,GACnB,OACI,wBAAIJ,KAAK,MAAMK,IAAKD,GAChB,wBAAIE,MAAM,OACN,2BAAIZ,EAAQZ,KAEhB,4BACI,2BAAIY,EAAQX,YAEhB,4BACI,2BAAIW,EAAQnC,YAEhB,4BACI,2BAAImC,EAAQjC,WAEhB,wBAAIoB,UAAU,OACV,4BAAQK,KAAK,SAASL,UAAU,sBAAsBS,QAAS,kBAAIO,EAAaH,KAAhF,kBAMpB,wBAAIM,KAAK,OACL,wBAAInB,UAAU,6BAA6BoB,QAAQ,KAAnD,wB,iBCzChCM,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIJT,QAAf,EC+FeU,EAxGA,SAAAtD,GAEX,IAAMuD,EAAyB,CAC3B3D,UAAY,GACZE,SAAW,IAJK,EAOU0D,mBAAS,IAPnB,mBAOfrB,EAPe,KAOLsB,EAPK,OAQQD,mBAAS,GARjB,mBAQfE,EARe,KAQNC,EARM,OASQH,mBAASD,GATjB,mBASfxB,EATe,KASN6B,EATM,OAUcJ,oBAAS,GAVvB,mBAUf1B,EAVe,KAUH+B,EAVG,OAWUL,mBAASZ,EAASkB,aAX5B,mBAWfC,EAXe,aAYkBP,oBAAS,IAZ3B,mBAYfQ,EAZe,KAYAC,EAZA,KAcpBC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAuB,WACzBV,EAAY,IACZQ,GAAe,GACfF,EAASK,WAAW,YAAYC,MAC/BC,MAAK,SAAAC,GACFA,EAAcC,SAAQ,SAAAC,GAClB,IAAIC,EAAOD,EAAIC,OACfA,EAAK9C,MAAQ6C,EAAItD,GACjBsC,GAAY,SAAAkB,GAAO,4BAAQA,GAAR,CAAiBD,UAExCT,GAAe,OAIvBW,QAAQC,IAAI1C,GAEZ,IAAM2C,EAAgB,uCAAG,sBAAAC,EAAA,sEACfhB,EAASK,WAAW,WACzBK,IAAI,wBACJJ,MACAC,MAAK,SAAAC,GACFZ,EAAWY,EAAcG,WALR,2CAAH,qDAShB1C,EAAY,uCAAG,WAAMxB,GAAN,SAAAuE,EAAA,sEACXD,IADW,OAEjBf,EAASiB,SAAS,CACdC,uBAAuB,IAGxBzE,IAAWA,EAAOW,GACjB4C,EAASK,WAAW,YAAYc,IAAI,CAChC/D,IAAMX,EAAOZ,UAAYY,EAAOV,SAAW4D,GAASyB,QAAQ,MAAO,IACnE/D,UAAYZ,EAAOY,UAAYgE,IAC/BxF,UAAYY,EAAOZ,UACnBE,SAAWU,EAAOV,WAGtBiE,EAASK,WAAW,YAAYK,IAAIjE,EAAOoB,OAAOyD,IAAI7E,GAE1DqD,GAAc,GACdM,IACAP,EAAWL,GAlBM,2CAAH,sDAqBZpD,EAAS,uCAAG,WAAMyB,GAAN,SAAAmD,EAAA,sEACRhB,EAASK,WAAW,YAAYK,IAAI7C,GAAO0D,SADnC,uBAERnB,IAFQ,OAGdN,GAAc,GACdD,EAAWL,GAJG,2CAAH,sDAYT6B,EAAuB,WAEzB,OADAzB,GAAW,SAAA4B,GAAU,OAAIA,EAAa,KAC/B7B,GAGX,OACI,kBAAC,IAAM8B,SAAP,KAEQ1D,EACA,kBAAC,EAAD,CACAE,aAAcA,EACd7B,UAAWA,EACX4B,QAASA,EACTD,WAAY+B,IAEZ,kBAAC,EAAD,CACAzB,UAAW4B,EACXlC,WAAY,WACR+B,GAAc,GACdD,EAAWL,IAEfrB,aA1BS,SAAA1B,GACjBoD,EAAWpD,GACXqD,GAAc,IAyBN1B,SAAUA,M,gBC7FXsD,EARF,SAAAzF,GACT,OACI,yBAAKkB,UAAU,+BACX,wBAAIA,UAAU,mBAAkB,uBAAGA,UAAU,eAA7C,gCCOGwE,EAVD,SAAA1F,GACV,OACI,yBAAKkB,UAAU,cACX,4BAAQK,KAAK,SAASL,UAAU,mEAC5B,uBAAGA,UAAU,qBADjB,UCsCGyE,MApCf,WAEE,IAaMC,EAbS,CACb,CACEC,KAAO,IACPC,UAAYxC,GACZ,CACAuC,KAAO,YACPC,UAAYxC,GACZ,CACAuC,KAAO,eACPC,UAAYxC,IAIed,KAAI,SAACuD,EAAOrD,GAAR,OAAgB,kBAAC,IAAD,CAAOsD,OAAK,EAACH,KAAME,EAAMF,KAAMC,UAAWC,EAAMD,UAAWpD,IAAKA,OAEnH,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,eACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,IAAD,KACG0E,QCtBKK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS5F,OAAO,kBAAC,EAAD,MAAS6F,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.650c1f2a.chunk.js","sourcesContent":["import * as Yup from 'yup'\r\nexport const RaceCarFormValidation = Yup.object().shape({\r\n    firstName: Yup.string()\r\n        .required(\"First Name is required.\"),\r\n    lastName: Yup.string()\r\n        .required(\"Last Name is required.\"),\r\n})","import React from 'react';\r\nimport { Formik, Form as FormFormik } from 'formik';\r\nimport {RaceCarFormValidation} from '../../utils/ValidationSchema';\r\n\r\nlet RaceCarForm = props => {\r\n\r\n    const { formValues, submitForm, deleteCar} = props;\r\n\r\n    const preSubmit = values => {\r\n        submitForm(values)\r\n    }\r\n\r\n    return(\r\n        <Formik\r\n        initialValues={formValues}\r\n        enableReinitialize={true}\r\n        validationSchema={RaceCarFormValidation}\r\n        onSubmit={values =>  preSubmit(values)}\r\n        render={({values, handleSubmit, handleChange, errors, touched, isSubmitting, resetForm, setSubmitting}) => (\r\n            <FormFormik>\r\n                <div className=\"container\">\r\n                    {formValues && formValues.id &&\r\n                        <div className=\"row\">\r\n                            <div className=\"col row\">\r\n                                <div className=\"col\">\r\n                                    <label>ID:</label>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <p>{formValues.id}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col row\">\r\n                                <div className=\"col\">\r\n                                    <label>Entry #:</label>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <p>{formValues.bibNumber}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"firstName\">First name:</label>\r\n                        <input \r\n                        id=\"firstName\"\r\n                        name=\"firstName\"\r\n                        className=\"form-control\" \r\n                        type=\"text\"\r\n                        placeholder=\"Enter first Name\"\r\n                        onChange={handleChange} \r\n                        value={values.firstName}\r\n                        />\r\n                        {touched.firstName && errors.firstName ? (\r\n                                <span className=\"text-danger\">* {errors.firstName}</span>\r\n                        ) : null}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"lastName\">Last name:</label>\r\n                        <input \r\n                        id=\"lastName\"\r\n                        name=\"lastName\"\r\n                        className=\"form-control\" \r\n                        type=\"text\"\r\n                        placeholder=\"Enter last Name\"\r\n                        onChange={handleChange} \r\n                        value={values.lastName}\r\n                        />\r\n                        {touched.lastName && errors.lastName ? (\r\n                                <span className=\"text-danger\">* {errors.lastName}</span>\r\n                        ) : null}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <button className=\"btn btn-secondary form-control\" type=\"reset\" onClick={resetForm}>Reset</button>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <button className=\"btn btn-primary form-control\" type=\"submit\" onClick={handleSubmit}>Submit</button>\r\n                        </div>\r\n                        {formValues && formValues.id &&\r\n                        <div className=\"col\">\r\n                            <button className=\"btn btn-warning form-control\" type=\"button\" onClick={()=>deleteCar(formValues.docId)}>Delete</button>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </FormFormik>\r\n        )}\r\n        >\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default RaceCarForm;","import React from 'react';\r\nimport RaceCarForm from './RaceCarForm';\r\n\r\nlet RaceCarContainer = props => {\r\n\r\n    const {toggleForm, raceCar, addCarToList, deleteCar} = props;\r\n\r\n    const submitForm = values => {\r\n        addCarToList(values)\r\n    }\r\n\r\n    return(\r\n        <div className=\"container animated fadeIn\">\r\n            <div className=\"row\">\r\n                <div className=\"col-2\"></div>\r\n                <div className=\"col-6\">\r\n                    <div className=\"p-3 m-3 border\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-1\">\r\n                                <i className=\"fas fa-arrow-left fa-2x\" onClick={()=>toggleForm(false)}></i>\r\n                            </div>\r\n                            <div className=\"col-10\">\r\n                                <h3 className=\"text-center\">Race Car Details</h3>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <RaceCarForm \r\n                            deleteCar={deleteCar}\r\n                            formValues={raceCar}\r\n                            submitForm={submitForm}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RaceCarContainer","import React from 'react';\r\n\r\nlet RaceCarsTable = props => {\r\n\r\n    const {toggleForm, getTableData, raceCars, isLoading} = props;\r\n\r\n    return(\r\n        <div className=\"container-fluid animated fadeIn\">\r\n            <div className=\"row py-3\">\r\n                <div className=\"col d-flex justify-content-start\">\r\n                    <h4>Car List</h4>\r\n                </div>\r\n                <div className=\"col d-flex justify-content-end\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={toggleForm}><i className=\"fas fa-plus mr-2\"></i>Register Car</button>\r\n                </div>\r\n            </div>\r\n            <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Bib Number</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        !isLoading ?\r\n                            raceCars.length > 0 ?\r\n                                raceCars.map((raceCar, index) => {\r\n                                    return(\r\n                                        <tr role=\"row\" key={index}>\r\n                                            <th scope=\"row\">\r\n                                                <p>{raceCar.id}</p>\r\n                                            </th>\r\n                                            <td>\r\n                                                <p>{raceCar.bibNumber}</p>\r\n                                            </td>\r\n                                            <td>\r\n                                                <p>{raceCar.firstName}</p>\r\n                                            </td>\r\n                                            <td>\r\n                                                <p>{raceCar.lastName}</p>\r\n                                            </td>\r\n                                            <td className=\"row\">\r\n                                                <button type=\"button\" className=\"btn btn-info btn-sm\" onClick={()=>getTableData(raceCar)}>View info</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            :\r\n                            <tr role=\"row\">\r\n                                <td className=\"v-align-middle text-center\" colSpan=\"5\">No record found</td>\r\n                            </tr> \r\n                        : \r\n                        <tr role=\"row\">\r\n                            <td className=\"v-align-middle text-center\" colSpan=\"5\">\r\n                                <div className=\"spinner-border\" role=\"status\"></div>\r\n                                <p>Loading</p>\r\n                            </td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RaceCarsTable","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAlvV9eS3KLWl6JOgV6yHopTIC9PRahnP8\",\r\n    authDomain: \"webraceapp.firebaseapp.com\",\r\n    databaseURL: \"https://webraceapp.firebaseio.com\",\r\n    projectId: \"webraceapp\",\r\n    storageBucket: \"webraceapp.appspot.com\",\r\n    messagingSenderId: \"1054099649668\",\r\n    appId: \"1:1054099649668:web:ad70585e156694a5aefed1\",\r\n    measurementId: \"G-BJ3BKN4VSQ\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase","import React, {useState, useEffect} from 'react';\r\nimport RaceCarContainer from './RaceCarContainer';\r\nimport RaceCarsTable from './RaceCarsTable';\r\nimport firebase from '../../config/FirebaseConfig';\r\n\r\nlet RaceCars = props => {\r\n\r\n    const RACE_CAR_INITIAL_STATE = {\r\n        firstName : '',\r\n        lastName : ''\r\n    }\r\n\r\n    let [raceCars, setRaceCars] = useState([]);\r\n    let [counter, setCounter] = useState(0);\r\n    let [raceCar, setRaceCar] = useState(RACE_CAR_INITIAL_STATE)\r\n    let [toggleForm, setToggleForm] = useState(false);\r\n    let [database, setDatabase] = useState(firebase.firestore());\r\n    let [isLoadingList, setLoadingList] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        getAllRaceCarsFromDB();\r\n    },[])\r\n\r\n    const getAllRaceCarsFromDB = () => {\r\n        setRaceCars([]);\r\n        setLoadingList(true)\r\n        database.collection('raceCars').get()\r\n        .then(querySnapShot => {\r\n            querySnapShot.forEach(doc => {\r\n                let data = doc.data();\r\n                data.docId = doc.id;\r\n                setRaceCars(oldList => [...oldList, data])\r\n            })\r\n            setLoadingList(false)\r\n        })\r\n    }\r\n\r\n    console.log(raceCars)\r\n\r\n    const getCounterFromDB = async () => {\r\n        await database.collection('counter')\r\n        .doc(\"AznLkk4ak9pF0wtKJRk4\")\r\n        .get()\r\n        .then(querySnapShot => {\r\n            setCounter(querySnapShot.data());\r\n        })\r\n    }\r\n\r\n    const addCarToList = async values => {\r\n        await getCounterFromDB();\r\n        database.settings({\r\n            timestampsInSnapshots: true\r\n        });\r\n        \r\n        if(values && !values.id){\r\n            database.collection('raceCars').add({\r\n                id : (values.firstName + values.lastName + counter).replace(/\\s/g, ''),\r\n                bibNumber : values.bibNumber = generateCarBibNumber(),\r\n                firstName : values.firstName,\r\n                lastName : values.lastName,\r\n            }); \r\n        } else {\r\n            database.collection('raceCars').doc(values.docId).set(values);\r\n        }\r\n        setToggleForm(false);\r\n        getAllRaceCarsFromDB();\r\n        setRaceCar(RACE_CAR_INITIAL_STATE)\r\n    }\r\n\r\n    const deleteCar = async docId => {\r\n        await database.collection('raceCars').doc(docId).delete();\r\n        await getAllRaceCarsFromDB();\r\n        setToggleForm(false);\r\n        setRaceCar(RACE_CAR_INITIAL_STATE)\r\n    }\r\n\r\n    const getTableData = values => {\r\n        setRaceCar(values)\r\n        setToggleForm(true);\r\n    }\r\n\r\n    const generateCarBibNumber = () => {\r\n        setCounter(oldCounter => oldCounter + 1);\r\n        return counter;\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {\r\n                toggleForm ? \r\n                <RaceCarContainer \r\n                addCarToList={addCarToList}\r\n                deleteCar={deleteCar}\r\n                raceCar={raceCar}\r\n                toggleForm={setToggleForm}/> \r\n                : \r\n                <RaceCarsTable \r\n                isLoading={isLoadingList}\r\n                toggleForm={()=>{\r\n                    setToggleForm(true);\r\n                    setRaceCar(RACE_CAR_INITIAL_STATE)\r\n                }} \r\n                getTableData={getTableData} \r\n                raceCars={raceCars}/>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RaceCars","import React from 'react';\r\n\r\nlet Header = props => {\r\n    return(\r\n        <div className=\"bg-9127f5 py-2 fixed-header\">\r\n            <h3 className=\"text-white ml-3\"><i className=\"fas fa-car\"></i>  Race Car Wep Application</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nlet SideBar = props => {\r\n    return(\r\n        <div className=\"list-group\">\r\n            <button type=\"button\" className=\"list-group-item list-group-item-action active animated fadeInUp\">\r\n                <i className=\"fas fa-list mr-2\"></i>Cars\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar","import React from 'react';\nimport './App.css';\nimport RaceCars from './components/raceCar/RaceCars';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from './components/navigations/Header';\nimport SideBar from './components/navigations/SideBar';\n\nfunction App() {\n\n  const routes = [\n    {\n      path : '/',\n      component : RaceCars\n    },{\n      path : '/raceCars',\n      component : RaceCars\n    },{\n      path : '/WebRaceCar/',\n      component : RaceCars\n    }\n  ]\n\n  const routeComponents = routes.map((route, key) => <Route exact path={route.path} component={route.component} key={key}/>)\n\n  return (\n    <div>\n      <Router>\n        <Header />\n        <div className=\"row p-0 m-0\">\n          <div className=\"col-2 p-0 m-0\">\n            <SideBar />\n          </div>\n          <div className=\"col-9\">\n            <Switch>\n              {routeComponents}\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}